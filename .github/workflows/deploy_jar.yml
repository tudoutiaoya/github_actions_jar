name: auto build and deploy # workflow 的名称

on: # 定义触发事件，push 推送到 main 分支或 pull request
  push:
    branches:
      - main
  pull_request:
    branches: [main]

jobs:
  build:
    runs-on: ubuntu-latest # 定义运行的环境

    steps: # 定义步骤
      - uses: actions/checkout@v3 # 使用 Checkout action，检出代码到 runner 的环境
      - uses: actions/setup-java@master # 使用 Setup Java action，安装 Java 运行时环境
        with:
          java-version: 8 # 指定 Java 版本
          distribution: "adopt"  # 指定使用 AdoptOpenJDK 发行版
          cache: maven # 缓存 Maven 依赖项

      - name: Build with Maven # 定义一个步骤名称
          - run: mvn clean -DfinalName=test_jar_deploy package --file pom.xml # 使用 Maven 构建 Java 项目

      - name: Copy Jar to Server # 定义一个步骤名称
        uses: appleboy/scp-action@master # 使用 appleboy/scp-action 这个开源 action，将 jar 包拷贝到远程服务器
        with:
          host: ${{ secrets.HOST }} # 远程服务器地址，从 secrets 中读取
          username: ${{ secrets.USERNAME }} # 远程服务器用户名，从 secrets 中读取
          port: ${{ secrets.PORT }} # 远程服务器端口号，从 secrets 中读取
          key: ${{ secrets.KEY }} # SSH 密钥，从 secrets 中读取
          source: "target/dousheng.jar" # 要拷贝的文件路径
          rm: true # 是否删除目标文件，如果为 true，表示先删除目标文件，再拷贝新文件
          target: "/www/test" # 目标文件路径

      - name: Deploy SSH into Server and start the application # 定义一个步骤名称
        uses: appleboy/ssh-action@master # 使用 appleboy/ssh-action 这个开源 action，远程执行 shell 脚本
        with:
          host: ${{ secrets.HOST }} # 远程服务器地址，从 secrets 中读取
          username: ${{ secrets.USERNAME }} # 远程服务器用户名，从 secrets 中读取 一般为root
          key: ${{ secrets.KEY }} # SSH 密钥，从 secrets 中读取
          port: ${{ secrets.PORT }} # 远程服务器端口号，从 secrets 中读取 一般为22
          command_timeout: 20s # shell 命令执行超时时间，20s
          script: | # 要执行的 shell 命令
            cd /www/test/target # 进入目标文件夹
            ps -ef | grep test_jar_deploy .jar | grep -v grep | awk '{print $2}' | xargs kill -9 
            nohup java -jar test_jar_deploy .jar --spring.profiles.active=prod > nohup.out & 
